1.android adb device
一些国产手机插入mac os 系统中无法被识别，在命令行输入 system_profiler SPUSBDataType在, 
然后将魅蓝note的vendor id 添加至 ~/.android/adb_usb.ini文件中，然后依次执行adb kill-server   adb start-server
即可进入adb shell。上述中的vendor id也可以到mac os中的 左上角苹果图标->关于本机->系统报告->硬件->usb中找到手机
相关的那个usb接口并查看厂商id(vendor id) 然后做上述相同操作即可。

2.android adb shell
miui
缺getopt ,ssh,vim
有getopts

3.windows cygwin ssh/
package安装openssh openssl(默认安装),安装完毕ssh-host-config,就[yes/no]按需选,默认不用填,
cygrunsrv --start sshd再重启动,ssh基础配置,**关闭默认防火墙**
防火墙配置
http://techtorials.me/cygwin/security/
edit /etc/sshd_config
set port 8895
http://techtorials.me/cygwin/configure-windows-firewall/
“Windows Firewall with Advanced Security”, click on “Inbound Rules”.
On the right hand-side under “Actions” and “Inbound Rules”, click on “New Rule…”.
Select “Port” and then click on “Next >”.
Select “TCP” and “Specific local ports:”.
In the “Specific local ports:” field, type in the port you chose previously during part 3 of this series.
If you have been following through my guides, verbatim, the port number to use is “8895”. 
When you’re ready to continue, click “Next >”.
For the name, give it something meaningful, such as the name of this service – “sshd” – feel free to also include a description to help you remember what this rule was for. 
Click “Finish” to open the port.
This concludes the sixth part of my Cygwin SSH server series. 
The next part, covers how to enable server logging through the use of syslog. 
wget rsync git 

scp different port(man ssh_config)
# cat ~/.ssh/config
Host 67.12.21.133
  Port 6774
Host 67.129.242.40
  Port 6774
http://askubuntu.com/questions/153960/scp-with-two-different-ports


4 scp 命令选项
-1  强制scp命令使用协议ssh1  -2  强制scp命令使用协议ssh2  -4  强制scp命令只使用IPv4寻址  -6  强制scp命令只使用IPv6寻址  
-B  使用批处理模式（传输过程中不询问传输口令或短语）  -C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）  
-p 保留原文件的修改时间，访问时间和访问权限。  -q  不显示传输进度条。  -r  递归复制整个目录。  
-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。   
-c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。   
-F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。  
-i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。   
-l limit  限定用户所能使用的带宽，以Kbit/s为单位。     
-o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，   
-P port  注意是大写的P, port是指定数据传输用到的端口号   
-S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。

5 freebsd default csh to bash
chsh USER -s SHELL
chsh root -s /usr/local/bin/bash

6 bash 返回数值
> function f { local x=$(false 2>&1); echo $?; }
> f
0
> function g { x=$(false 2>&1); echo $?; }
> g
1
> function h { local x; x=$(false 2>&1); echo $?; }
> h
1

7 android ant ndk build
1).android create 显示命令选项 
2)分支1 ndk-build 编译jni文件，参考http://developer.android.com/ndk/guides/android_mk.html，ndk-demo（分支为origin/android-mk)
  分支2 参考如上网址，Standalone Toolchain，编译放到lib文件里（没测试），可参考libuv
3)ant debug，签名等等
)复杂方法参考
http://geosoft.no/development/android.html
http://www.cnblogs.com/jk1001/archive/2010/08/05/1793216.html
http://www.cnblogs.com/wujd/archive/2012/01/10/wujiandong-android-1.html

8centos ssh
I have identified the problem, and it was to do with CentOS rather than Ubuntu in the end(wasn't sure hence posting here first!). 
CentOS appears to have **encrypted** my /home folder (even though I remember specifically unticking that option, but hey ho ) 
so followed this Ubuntu Community OpenSSH post and did the following:

[root@SERVER~#] mkdir /etc/ssh/user1
[root@SERVER~#] cp /home/user1/.ssh/authorized_keys /etc/ssh/user1/
[root@SERVER~#] chown -R user1:user1 /etc/ssh/user1
[root@SERVER~#] chmod 755 /etc/ssh/user1
[root@SERVER~#] chmod 644 /etc/ssh/user1/authorized_keys
[root@SERVER~#] vi /etc/ssh/sshd_config 
#RSAAuthentication yes
#PubkeyAuthentication yes
# changed .ssh/authorized_keys to /etc/ssh/user1/authorized_keys <<<<<<<
AuthorizedKeysFile      /etc/ssh/user1/authorized_keys
#AuthorizedKeysCommand none
#AuthorizedKeysCommandRunAs nobody

PasswordAuthentication no#禁止密码登陆
